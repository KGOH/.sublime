" A double quote character starts a comment.

noremap <space><space> :ShowOverlay overlay=command_palette<CR>
nnoremap <space>ff :MyFindFile<CR>
nnoremap <space>/ :ShowPanel panel=find_in_files<CR>
nnoremap <space>ss :ShowPanel panel=find<CR>

" Toggles
nnoremap <space>ts :ToggleStatusBar<CR>
nnoremap <space>tg :ToggleSetting setting=gutter<CR>
nnoremap <space>tn :ToggleSetting setting=line_numbers<CR>
nnoremap <space>tw :ToggleSetting setting=word_wrap<CR> 
nnoremap <space>tm :ToggleMinimap<CR>
nnoremap <space>tM :ToggleMenu<CR>
nnoremap <space>tt :ToggleTabs<CR>

" Panel create
nnoremap <space>wv :CreatePane direction=right give_focus=true<CR>
nnoremap <space>w/ :CreatePane direction=right give_focus=true<CR>
nnoremap <space>ws :CreatePane direction=down give_focus=true<CR>
nnoremap <space>w- :CreatePane direction=down give_focus=true<CR>
nnoremap <space>wc :DestroyPane direction=self<CR>

" Panel move
nnoremap <space>wH :CarryFileToPane direction=left<CR>
nnoremap <space>wJ :CarryFileToPane direction=down<CR>
nnoremap <space>wK :CarryFileToPane direction=up<CR>
nnoremap <space>wL :CarryFileToPane direction=right<CR>

" Panel navigation
nnoremap <space>0 :FocusSideBar<CR>
nnoremap <space>1 :FocusGroup group=0<CR>
nnoremap <space>2 :FocusGroup group=1<CR>
nnoremap <space>3 :FocusGroup group=2<CR>
nnoremap <space>4 :FocusGroup group=3<CR>
nnoremap <space>5 :FocusGroup group=4<CR>
nnoremap <space>6 :FocusGroup group=5<CR>
nnoremap <space>7 :FocusGroup group=6<CR>
nnoremap <space>8 :FocusGroup group=7<CR>
nnoremap <space>9 :FocusGroup group=8<CR> 
nnoremap <space>w<left> :NvViCtrlW action=h<CR>
nnoremap <space>w<down> :NvViCtrlW action=j<CR>
nnoremap <space>w<up> :NvViCtrlW action=kR>
nnoremap <space>w<right> :NvViCtrlW action=l<CR>
nnoremap <space>wh :NvViCtrlW action=h<CR>
nnoremap <space>wj :NvViCtrlW action=j<CR>
nnoremap <space>wk :NvViCtrlW action=k<CR>
nnoremap <space>wl :NvViCtrlW action=l<CR>

" Buffer
nnoremap <space>bn :PrevViewInStack<CR>
nnoremap <space>bp :NextViewInStack<CR>
nnoremap <space><tab> :NextViewInStack<CR>
nnoremap <space>bh :PrevView<CR>
nnoremap <space>bl :NextView<CR>
nnoremap <space>b<left> :NextView<CR>
nnoremap <space>b<right> :PrevView<CR>
nnoremap <space>bN :NewFile<CR>
nnoremap <space>bm :AdvancedNewFileMove<CR>
nnoremap <space>bb :ExtendedSwitcher list_mode=window<CR>
nnoremap <space>bc :CloseFile<CR>
nnoremap <space>by :CopyPath<CR>

" OS tabs
nnoremap <space>ll :NextOsTab<CR>
nnoremap <space>lh :PrevOsTab<CR>
nnoremap <space>ln :NextOsTab<CR>
nnoremap <space>lp :PrevOsTab<CR>
nnoremap <space>lN :NewOsTab<CR>
nnoremap <space>lc :CloseWindow<CR>

" Project commands
nnoremap <space>pf :ShowOverlay overlay=goto show_files=true<CR>
nnoremap <space>pt :ToggleSidebarAndFocus<CR>
nnoremap <space>pc :AdvancedNewFileNew<CR>
nnoremap <space>pR :RevealInSideBar<CR>
nnoremap <space>ps :ShowPanel panel=find_in_files<CR>
nnoremap <space>pp :MyRecentFolders new_window=false<CR>
nnoremap <space>pP :MyRecentFolders new_window=true<CR>
nnoremap <space>pl :MyFindFile only_folders=true<CR>
nnoremap <space>pL :MyRecentFolders new_window=true<CR>

" Ace jump
noremap <space>jj :AceJumpChar<CR>
noremap <space>jw :AceJumpWord<CR>
noremap <space>jl :AceJumpLine<CR>

" Folds 
nnoremap zr :UnfoldAll<CR>
nnoremap zm :FoldByLevel level=1<CR>

" Jump to paren
nnoremap ( :NvViLeftSquareBracket action=target mode=mode_normal target='('<CR>
vnoremap ( :NvViLeftSquareBracket action=target mode=mode_visual target='('<CR>
nnoremap ) :NvViRightSquareBracket action=target mode=mode_normal target=')'<CR>
vnoremap ) :NvViRightSquareBracket action=target mode=mode_visual target=')'<CR>
nnoremap [ :NvViLeftSquareBracket action=target mode=mode_normal target='['<CR>
vnoremap [ :NvViLeftSquareBracket action=target mode=mode_visual target='['<CR>
nnoremap ] :NvViRightSquareBracket action=target mode=mode_normal target=']'<CR>
vnoremap ] :NvViRightSquareBracket action=target mode=mode_visual target=']'<CR>
nnoremap { :NvViLeftSquareBracket action=target mode=mode_normal target='{'<CR>
vnoremap { :NvViLeftSquareBracket action=target mode=mode_visual target='{'<CR>
nnoremap } :NvViRightSquareBracket action=target mode=mode_normal target='}'<CR>
vnoremap } :NvViRightSquareBracket action=target mode=mode_visual target='}'<CR>


"

nnoremap gd :LspSymbolDefinition<CR> 

nnoremap <space>a :ShowPanel panel=output.exec<CR>
" Clojure Sublimed
"inoremap  enter :ClojureSublimedInsertNewline<CR>
"noremap  o A:ClojureSublimedInsertNewline<CR>

nnoremap  ,sc :ClojureSublimedConnectSocketRepl<CR>
nnoremap  ,sj :MyClojureJackIn<CR> 
nnoremap  ,srd :ExecutorExecuteShell command='freeport > .repl-port && echo "$(<.repl-port)" && clojure  -X clojure.core.server/start-server :name repl :port "$(<.repl-port)" :accept clojure.core.server/repl :server-daemon false'<CR>
nnoremap  ,srl :ExecutorExecuteShell command='freeport > .repl-port && echo "$(<.repl-port)" && lein repl :headless :port $(<.repl-port)'<CR>
nnoremap  ,sa :ShowPanel panel=output.exec<CR>

noremap  o A:ClojureSublimedInsertNewline<CR>
noremap  O kA:ClojureSublimedInsertNewline<CR>

noremap  ,ee :ClojureSublimedEval<CR>
nnoremap  ,eb :ClojureSublimedEvalBuffer<CR>
nnoremap  ,ec :ClojureSublimedClearEvals<CR>
nnoremap  ,eC :ClojureSublimedInterruptEval<CR>
noremap  ,e; :MyClojureSublimedEvalToComment<CR>
noremap  ,ep :ClojureSublimedEval transform='(as-> %code $ (do (require [(symbol "clojure.pprint")]) (require [(symbol "clojure.java.io")]) (with-open [w (clojure.java.io/writer "/tmp/sublimed_output.edn")] (clojure.pprint/pprint $ w)) $))'\|:OpenFile file='/tmp/sublimed_output.edn'<CR>
"noremap  ,ep :ClojureSublimedEval transform='(as-> %code $ (do (require [(symbol "fipp.edn")]) (require [(symbol "clojure.java.io")]) $) (do (fipp.edn/pprint $ {:writer (clojure.java.io/writer "/tmp/sublimed_output.edn")}) $))'\|:OpenFile file='/tmp/sublimed_output.edn'<CR>
noremap  ,ef :ClojureSublimedEval transform='(as-> %code $ (do (require [(symbol "clojure.java.io")]) (with-open [w (clojure.java.io/writer "/tmp/sublimed_output.edn")] (binding [*print-length* nil *out* w] (pr $))) $))'\|:OpenFile file='/tmp/sublimed_output.edn'<CR>
noremap  ,eF :ClojureSublimedEval transform='(as-> %code $ (do (require [(symbol "clojure.java.io")]) (with-open [w (clojure.java.io/writer "/tmp/sublimed_output.edn")] (binding [*print-length* nil *out* w] (print $))) $))'\|:OpenFile file='/tmp/sublimed_output.edn'<CR>

nnoremap  ,pp :ClojureSublimedEvalCode code='(do (require [(symbol "ps.sc")]) (require [(symbol "sc.api")]))'\|:MyClojureSublimedEvalWithInsert insert_str='(sc.api/spyqt)'<CR>
nnoremap  ,pP :ClojureSublimedEvalCode code='(do (require [(symbol "sc.api")]) (ps.sc/undefsc-all) (sc.api/dispose-all!) (ps.sc/drop-letsc-select!) :ps.sc/dispose)'\|:MyClojureSublimedEvalWithInsert insert_str='(sc.api/spyqt)'<CR>
noremap  ,pl :ClojureSublimedEval transform='(ps.sc/letsc! (quote %code))'<CR>
noremap  ,pa :ClojureSublimedEval transform='(ps.sc/letsc-all (quote %code))'<CR>
noremap  ,pd :ClojureSublimedEvalCode code='(do (ps.sc/defsc!) :ps.sc/defsc-last)'<CR>
noremap  ,pu :ClojureSublimedEvalCode code='(do (ps.sc/undefsc-all) :ps.sc/undef-all)'<CR>
noremap  ,pq :ClojureSublimedEvalCode code='(do (ps.sc/undefsc-all) (sc.api/dispose-all!) (ps.sc/drop-letsc-select!) :ps.sc/dispose)'<CR>
nnoremap  ,pb :ClojureSublimedEvalCode code='(require [(symbol "sc.api")])'\|:MyClojureSublimedEvalWithInsert insert_str='(sc.api/brk)'<CR>
noremap  ,pn :ClojureSublimedEvalCode code='(sc.api/loose)'<CR>

noremap  ,ps :MyClojureSublimedSelect<CR>

noremap <space>Cp :CopyPath<CR>

nnoremap  ,i :ClojureSublimedToggleInfo<CR>
nnoremap  ,Te :ClojureSublimedToggleTrace<CR>
nnoremap  ,Td :ClojureSublimedToggleSymbol<CR>

nnoremap  ,y :ClojureSublimedCopy<CR>

nnoremap  ,== :ClojureSublimedReindentLines<CR>
nnoremap  ,=r :ClojureSublimedReindentLines<CR>
nnoremap  ,=b :ClojureSublimedReindentBuffer<CR>

nnoremap  ,ta :ClojureSublimedEvalCode code='(clojure.test/run-all-tests)'<CR>
nnoremap  ,tn :ClojureSublimedEvalCode code='(clojure.test/run-tests)'<CR>
noremap  ,tT :ClojureSublimedEval transform='(clojure.test/run-test-var %code)'<CR>
noremap  ,tt :MyClojureSublimedRunTest run_test_xform='(clojure.test/run-test-var %code)'<CR>


" Paredit
"inoremap FileType ( :PareditOpenRound<CR>
"inoremap FileType ) :PareditCloseRound<CR>
"inoremap FileType [ :PareditOpenSquare<CR>
"inoremap FileType ] :PareditCloseSquare<CR>
"inoremap FileType { :PareditOpenCurly<CR>
"inoremap FileType } :PareditCloseCurly<CR>
"inoremap FileType " :PareditDoublequote<CR>
"inoremap  <del> :PareditForwardDelete<CR>
"inoremap  <BS> :PareditBackwardDelete<CR>
"inoremap  C-k :PareditKill<CR>
"nnoremap  S-d :PareditKill<CR>
nnoremap <space>kdx :PareditKillExpression<CR>
nnoremap <space>kdw :PareditForwardKillWord<CR>
nnoremap <space>kdW :PareditBackwardKillWord<CR>
noremap <space>kw :PareditWrapRound<CR>
noremap <space>k( :PareditWrapRound<CR>
noremap <space>k) :PareditWrapRound<CR>
noremap <space>k[ :PareditWrapSquare<CR>
noremap <space>k] :PareditWrapSquare<CR>
noremap <space>k{ :PareditWrapCurly<CR>
noremap <space>k} :PareditWrapCurly<CR>
noremap <space>k" :PareditMetaDoublequote<CR>
nnoremap <space>kW :PareditSpliceSexp<CR>
nnoremap <space>ks :PareditForwardSlurpSexp<CR>
nnoremap <space>kb :PareditForwardBarfSexp<CR>
nnoremap <space>kS :PareditBackwardSlurpSexp<CR>
nnoremap <space>kB :PareditBackwardBarfSexp<CR>
nnoremap <space>kf :PareditSplitSexp<CR>
nnoremap <space>kj :PareditJoinSexp<CR>
nnoremap <space>kr :PareditRaiseSexp<CR>

